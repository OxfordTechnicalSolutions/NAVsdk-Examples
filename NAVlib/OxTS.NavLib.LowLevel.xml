<?xml version="1.0"?>
<doc>
    <assembly>
        "CLRDatastore"
    </assembly>
    <members>
        <member name="M:OxTS.NavLib.FileBased.DataStore.report_streams(System.String@,System.Boolean)">
            <summary>Report on all streams to an output stream</summary>
            <param name="out">String showing debug information on streams</param>
            <param name="include_defunct">Include streams that are no longer active</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@,System.UInt32,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the direct mode filtered on a particular stream id</summary>
            <param name="sms">List of measurements that have been added to direct decode from <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@,System.UInt32)">
            <summary>Query the data store measurement configuration of the direct mode filtered on a particular stream id</summary>
            <param name="sms">List of measurements that have been added to direct decode from <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@,System.UInt32,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the retain mode filtered on a particular stream id</summary>
            <param name="sms">List of measurements that have been added to retain from <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@,System.UInt32)">
            <summary>Query the data store measurement configuration of the retain mode filtered on a particular stream id</summary>
            <param name="sms">List of measurements that have been added to retain from <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the direct mode</summary>
            <param name="sms">List of measurements that have been added to direct decode</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@)">
            <summary>Query the data store measurement configuration of the direct mode</summary>
            <param name="sms">List of measurements that have been added to direct decode</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the retain mode</summary>
            <param name="sms">List of measurements that have been added to retain</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StoreMeasurement}@)">
            <summary>Query the data store measurement configuration of the retain mode</summary>
            <param name="sms">List of measurements that have been added to retain</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_stream_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StreamMeasurement}@,System.UInt32,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the measurements avaliable for a given stream</summary>
            <param name="sms">List of measurements available from stream with <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_stream_measurements(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.StreamMeasurement}@,System.UInt32)">
            <summary>Query the measurements avaliable for a given stream</summary>
            <param name="sms">List of measurements available from stream with <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_streams(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.QueryStream}@)">
            <summary>Query the data store stream configuration</summary>
            <param name="qss">List of QueryStream structures for all streams added to the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_groups(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.QueryGroup}@)">
            <summary>Query the data store group configuration</summary>
            <param name="qgs">List of QueryGroup structures for all groups within the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_resources(System.Collections.Generic.List`1{OxTS.NavLib.FileBased.QueryResource}@)">
            <summary>Query the data store resource configuration</summary>
            <param name="qrs">List of QueryResource structures of all resources added to the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_stream(OxTS.NavLib.FileBased.QueryStream@,System.UInt32)">
            <summary>Obtain some information about a stream</summary>
            <param name="qs">QueryStream structure containing details of <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id of stream to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_group(OxTS.NavLib.FileBased.QueryGroup@,System.UInt32)">
            <summary>Obtain some information about a group</summary>
            <param name="qg">QueryGroup structure containing details of <paramref name="group_id" /></param>
            <param name="group_id">Group Id of group to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_resource(OxTS.NavLib.FileBased.QueryResource@,System.UInt32)">
            <summary>Obtain some information about a resource</summary>
            <param name="qr">QueryResource structure containing details of <paramref name="resource_id" /></param>
            <param name="resource_id">Resource Id of resource to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.query_store(OxTS.NavLib.FileBased.QueryStore@)">
            <summary>Obtain some information about the store</summary>
            <param name="qs">QueryStore structure containing current store details</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.export_streams(System.Collections.Generic.List`1{System.UInt32},System.String,System.Int64,System.Int64)">
            <summary>Export the given selection of streams to an XCom file</summary>
            <remarks>
If the streams happens to be from the multiple resources then stream serial numbers are remapped to the data store stream id.
</remarks>
            <param name="stream_ids">Stream Ids</param>
            <param name="filename">Filename of new file</param>
            <param name="start">GPS nanosecond of start of region to extract</param>
            <param name="end">GPS nanosecond of end of region to extract</param>
            <returns>RETURN_TYPE_ERROR, RETURN_TYPE_CANCEL, RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.export_resource(System.UInt32,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>Export a section of a resource to a new file in its native or XCom file format</summary>
            <param name="resource_id">Resource ID</param>
            <param name="filename">Filename of new file</param>
            <param name="start">GPS nanosecond of start of region to extract</param>
            <param name="end">GPS nanosecond of end of region to extract</param>
            <param name="native">If true export in native format, else export as XCom</param>
            <returns>RETURN_TYPE_ERROR, RETURN_TYPE_CANCEL, RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.export_resource(System.UInt32,System.String,System.Int64,System.Int64)">
            <summary>Export a section of a resource to a new file in its native file format</summary>
            <param name="resource_id">Resource ID</param>
            <param name="filename">Filename of new file</param>
            <param name="start">GPS nanosecond of start of region to extract</param>
            <param name="end">GPS nanosecond of end of region to extract</param>
            <returns>RETURN_TYPE_ERROR, RETURN_TYPE_CANCEL, RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.retain_get(OxTS.NavLib.FileBased.Aspect,System.Int64,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Variable`1{System.UInt16}}@)">
            <summary>Populate the destination vector with uint16 variables from the stores as requested by the aspect</summary>
            <remarks>
This uses the internal locks (in default locking mode) of the data store and is thread safe.
</remarks>
            <param name="aspect">Aspect of measurements requested</param>
            <param name="point">GPS nanosecond of requested data</param>
            <param name="destination">Requested data as unsigned short</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.retain_get(OxTS.NavLib.FileBased.Aspect,System.Int64,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Variable`1{System.Double}}@)">
            <summary>Populate the destination vector with double variables from the stores as requested by the aspect</summary>
            <remarks>
This uses the internal locks (in default locking mode) of the data store and is thread safe.
</remarks>
            <param name="aspect">Aspect of measurements requested</param>
            <param name="point">GPS nanosecond of requested data</param>
            <param name="destination">Requested data as double</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.retain_get(OxTS.NavLib.FileBased.Aspect,System.Int64,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Dynamic}@)">
            <summary>Populate the destination vector with dynamics from the stores as requested by the aspect</summary>
            <param name="aspect">Aspect of measurements requested</param>
            <param name="point">GPS nanosecond of requested data</param>
            <param name="destination">Requested data as Dynamic</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.retain_decode(System.Int64,System.Int64,System.Int64)">
            <summary>Run retain decoder over data from <paramref name="start" /> to <paramref name="end" /> in increments of <paramref name="inc" /></summary>
            <param name="start">GPS nanosecond to start decoding</param>
            <param name="end">GPS nanosecond to end decoding</param>
            <param name="inc">Nanosecond increments to decode</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.retain_use_element(OxTS.NavLib.FileBased.Aspect,System.UInt32,System.String)">
            <summary>Use elements in an aspect</summary>
            <param name="aspect">Aspect to add measurement to</param>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to use for retain decode</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.retain_add_element(System.UInt32,System.String)">
            <summary>Add elements of a stream to a store</summary>
            <remarks>
For retain mode all elements are added to the same store.
</remarks>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to add for retain decode</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.retain_clear">
            <summary>Clear the internal element configuration</summary>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_decode_end">
            <summary>Direct decode set-down function</summary>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_decode_step(OxTS.NavLib.FileBased.Aspect,System.Int64,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Variable`1{System.UInt16}}@)">
            <summary>Populate the destination arrays with uint16 values and flags from the streams as requested by the aspect</summary>			//!
<remarks>
When finished using this function one must call direct_decode_end().
</remarks><param name="aspect">Aspect containing the measuremnts requested</param><param name="point">GPS nanosecond value to decode</param><param name="destination">Measurement values output as unsigned short</param><returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns></member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_decode_step(OxTS.NavLib.FileBased.Aspect,System.Int64,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Variable`1{System.Double}}@)">
            <summary>Populate the destination arrays with double values and flags from the streams as requested by the aspect</summary>
            <remarks>
When finished using this function one must call direct_decode_end().
</remarks>
            <param name="aspect">Aspect containing the measuremnts requested</param>
            <param name="point">GPS nanosecond value to decode</param>
            <param name="destination">Measurement values output as double</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_decode_step(OxTS.NavLib.FileBased.Aspect,System.Int64,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Dynamic}@)">
            <summary>Populate the destination array with dynamics from the streams as requested by the aspect</summary>
            <remarks>
This method is not the fastest way to get data but it is quite convenient.
When finished using this function one must call direct_decode_end().
</remarks>
            <param name="aspect">Aspect containing the measuremnts requested</param>
            <param name="point">GPS nanosecond value to decode</param>
            <param name="destination">Measurement values output as Dynamic</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_decode_begin(System.Int64)">
            <summary>Direct decode set-up function</summary>
            <remarks>
Enables streams to decode the right things and the intial seek.
The next call after this must be one of the direct_decode_step() functions.
</remarks>
            <param name="point">GPS nanosecond value to start the decoder at</param>
            <returns>RETURN_TYPE_CANCEL, RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_use_element(OxTS.NavLib.FileBased.Aspect,System.UInt32,System.String)">
            <summary>Use elements in an aspect</summary>
            <param name="aspect">Aspect to add measurement to</param>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to use for direct decode</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_add_element(System.UInt32,System.String)">
            <summary>Add elements of a stream to a store</summary>
            <remarks>For direct mode all elements are added to the same store.</remarks>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to add for direct decode</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.direct_clear">
            <summary>Clear the internal element configuration</summary>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_end(System.Int64@)">
            <summary>Obtain the latest nano value from the postscans of all the storable streams</summary>
            <remarks>One should ensure at leat one stream is storable otherwise the result in meaningless.</remarks>
            <param name="nano_end">GPS nanosecond time of the latest point in the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_start(System.Int64@)">
            <summary>Obtain the earliest nano value from the prescans of all the storable streams</summary>
            <remarks>One should ensure at leat one stream is storable otherwise the result in meaningless.</remarks>
            <param name="nano_start">GPS nanosecond time of the earliest point in the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_end(System.Collections.Generic.List`1{System.UInt32},System.Int64@)">
            <summary>Obtain the latest nano value from the prescans of a collection of storable streams</summary>
            <remarks>One should ensure at least one stream is storable otherwise the result in meaningless.</remarks>
            <param name="stream_ids">Stream Ids</param>
            <param name="nano_end">GPS nanosecond time of the end of the latest stream</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_start(System.Collections.Generic.List`1{System.UInt32},System.Int64@)">
            <summary>Obtain the earliest nano value from the prescans of a collection of storable streams</summary>
            <remarks>One should ensure at least one stream is storable otherwise the result in meaningless.</remarks>
            <param name="stream_ids">Stream Ids</param>
            <param name="nano_start">GPS nanosecond time of the earliest stream</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_end(System.UInt32,System.Int64@)">
            <summary>Obtain the nano value from the postscan of a storable stream</summary>
            <remarks>One should not call this on a non-storable stream as the result in meaningless.</remarks>
            <param name="stream_id">Stream Id</param>
            <param name="nano_end">GPS nanosecond time at end of stream with <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_start(System.UInt32,System.Int64@)">
            <summary>Obtain the nano value from the prescan of a storable stream</summary>
            <remarks>One should not call this on a non-storable stream as the result in meaningless.</remarks>
            <param name="stream_id">Stream Id</param>
            <param name="nano_start">GPS nanosecond time at start of stream with <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_end(System.UInt32,System.String,OxTS.NavLib.Lib.Dynamic@)">
            <summary>Obtain a value from the postscan</summary>
            <param name="stream_id">Stream</param>
            <param name="tag">Name of measurement requested</param>
            <param name="dyn_end">
                <paramref name="tag" /> measurement from <paramref name="stream_id" /> at end of stream</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_start(System.UInt32,System.String,OxTS.NavLib.Lib.Dynamic@)">
            <summary>Obtain a value from the prescan</summary>
            <param name="stream_id">Stream</param>
            <param name="tag">Name of measurement requested</param>
            <param name="dyn_start">
                <paramref name="tag" /> measurement from <paramref name="stream_id" /> at start of stream</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_header(System.UInt32,System.String,OxTS.NavLib.Com.Meta@)">
            <summary>Obtain a copy of a specific auxiliary header</summary>
            <param name="stream_id">Stream</param>
            <param name="tag">Name of the header requested</param>
            <param name="meta">
                <paramref name="tag" /> header from  <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_headers(System.UInt32,System.Collections.Generic.List`1{OxTS.NavLib.Com.Meta}@)">
            <summary>Obtain a copy of the auxiliary headers</summary>
            <param name="stream_id">Stream</param>
            <param name="metas">Auxillary headers from <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_stream_groupies(System.UInt32,System.Collections.Generic.List`1{System.UInt32}@)">
            <summary>Get all streams that are members of the same group as the given stream</summary>
            <remarks>
The returned streams will contain the given stream, unless the given stream is unknown to the store
resulting in an empty result. If the size of the returned streams is one then we can conclude the
given stream is a singleton.
</remarks>
            <param name="stream_id">Stream in group</param>
            <param name="stream_ids">List of streams that are in the same group as <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.add_resources(System.Collections.Generic.List`1{System.String},System.Collections.Generic.List`1{System.UInt32},System.UInt32@)">
            <summary>Add physical resources to the data store</summary>
            <param name="names">Resource locations (filenames)</param>
            <param name="stream_ids">List of stream IDs, new streams from resources will be appended</param>
            <param name="added">Number of streams added</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.add_resource(System.String,System.Collections.Generic.List`1{System.UInt32},System.UInt32@)">
            <summary>Add a resource to the data store</summary>
            <param name="name">Resource location (filename)</param>
            <param name="stream_ids">List of stream IDs, new streams from resources will be appended</param>
            <param name="added">Number of streams added</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_outgoing_message(OxTS.NavLib.FileBased.MessageOutgoing@,System.Boolean)">
            <summary>Get data store outgoing message</summary>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
            <param name="message">Reference used to return the outgoing message</param>
            <param name="flush">Flush message queue</param>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.get_outgoing_message(OxTS.NavLib.FileBased.MessageOutgoing@)">
            <summary>Get data store outgoing message, does not flush message queue</summary>
            <param name="message">Reference used to return the outgoing message</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.cancel">
            <summary>Request the data store to cancel all current operations and leave the store in a good shape</summary>
            <remarks>
This function will wait until all the current read and write locks are cleared. While in this function
any incoming calls (other than get_outgoing_message()) will be blocked on the cancel lock. Upon exit
the cancel lock is cleared and the data store is again ready to be used. The user should manage any
race conditions after the exiting of this function. If this function times out and not all locks have
been cleared then the error return type is returned.
</remarks>
            <returns>RETURN_TYPE_CANCEL, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.Dispose">
            <summary>Destructor</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DataStore.#ctor(OxTS.NavLib.FileBased.Options)">
            <summary>Constructor</summary>
            <param name="options">Define the size and resolution of the datastore data</param>
        </member>
        <member name="T:OxTS.NavLib.FileBased.DataStore">
            <summary>FileBased datastore classes</summary>
            <summary>FileBased datastore</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Options.#ctor(System.UInt32,System.Int64,System.UInt32,System.Double,System.UInt64,System.UInt32)">
            <summary>Constructor</summary>
            <param name="store_depth">Maximum size of the storage space per stream is pow(2, store_depth) bytes</param>
            <param name="store_resolution">Maximum temporal resolution of the storage space for a stream</param>
            <param name="threads">Number of decode threads to use if threading enabled</param>
            <param name="message_time">Progress message reporting frequency based on time used</param>
            <param name="message_gap">Progress message reporting frequency based on bytes read</param>
            <param name="message_depth">Size of message buffer is pow(2, message_depth) bytes</param>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Options.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.Options.MessageDepth">
            <summary>Size of message buffer is pow(2, message_depth) bytes</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.Options.MessageGap">
            <summary>Progress message reporting frequency based on bytes read</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.Options.MessageTime">
            <summary>Progress message reporting frequency based on time used</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.Options.Threads">
            <summary>Number of decode threads to use if threading enabled</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.Options.StoreResolution">
            <summary>Maximum temporal resolution of the storage space for a stream</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.Options.StoreDepth">
            <summary>Maximum size of the storage space per stream is pow(2, store_depth) bytes</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.Options">
            <summary>Global datastore option</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.MessageOutgoing.done">
            <summary>Message sent</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.MessageOutgoing.operation">
            <summary>Message type</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.MessageOutgoing.resource_id">
            <summary>resource message relates to</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.MessageOutgoing.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.MessageOutgoing">
            <summary>Simple structure to aid messaging</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.destination_at(System.UInt32)">
            <summary>Get specific destination measurement from Aspect</summary>
            <param name="destination_index">Index of destination measurement to retrieve</param>
            <returns>Copy of destination measurement if index is in range, nullptr otherwise</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.destinations">
            <summary>Get List of destination measurements from Aspect</summary>
            <returns>List of destination measurements</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.measurement_at(System.UInt32)">
            <summary>Get measurement at <paramref name="measurement_index" /></summary>
            <param name="measurement_index">index of aspect measurement to retrieve</param>
            <returns>Copy of aspect measurement if index is in range, nullptr otherwise</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.measurements">
            <summary>Measurement information</summary>
            <returns>List of measurements in aspect</returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.clear">
            <summary>Clears the aspect stores, measurements and destinations</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.Dispose">
            <summary>Destructor</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.Aspect.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.Aspect">
            <summary>Aspect</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryStream.op_Assign(OxTS.NavLib.FileBased.QueryStream)">
            <summary>Assigment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryStream.#ctor(OxTS.NavLib.FileBased.QueryStream)">
            <summary>Copy Constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamNanoEnd">
            <summary>Stream end time</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamNanoStart">
            <summary>Stream start time</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamProduct">
            <summary>Product name</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamStorable">
            <summary>Is stream storable?</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamConfigured">
            <summary>Is stream configured?</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamCaptured">
            <summary>Is stream captured?</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamCodec">
            <summary>The stream codec type</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamSerialId">
            <summary>The serial assigned by the resource</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStream.StreamId">
            <summary>The stream id assigned by the data store</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryStream.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.QueryStream">
            <summary>Simple structure to aid the querying of a stream</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryGroup.op_Assign(OxTS.NavLib.FileBased.QueryGroup)">
            <summary>Assigment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryGroup.GroupTag">
            <summary>Group Tag assigned by the resource</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryGroup.GroupId">
            <summary>Group Id assigned by the datastore</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryGroup.#ctor">
            <summary>Default constrctor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.QueryGroup">
            <summary>brief Simple structure to aid the querying of a group.</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryResource.op_Assign(OxTS.NavLib.FileBased.QueryResource)">
            <summary>Assigment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryResource.#ctor(OxTS.NavLib.FileBased.QueryResource)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryResource.ResourceExtension">
            <summary>Resource Extension</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryResource.ResourceName">
            <summary>Resource Name</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryResource.ResourceTransport">
            <summary>Resource transpport type</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryResource.ResourceId">
            <summary>Resource Id assigned by the datastore</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryResource.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.QueryResource">
            <summary>Simple structure to aid the querying of a resource.</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStore.Streams">
            <summary>Number of streams in datastore</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStore.Groups">
            <summary>Number of groups in datastore</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.QueryStore.Resources">
            <summary>Number of resources in datastore</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.QueryStore.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.QueryStore">
            <summary>Simple structure to aid the querying general properties of the data store.</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.DestinationMeasurement.index">
            <summary>Index into the original mesaurement</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.DestinationMeasurement.measurement">
            <summary>Original measurement index</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DestinationMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.DestinationMeasurement">
            <summary>A simple structure allowing information of the interface array positions to be collected</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.AspectMeasurement.destination">
            <summary>Destination position in the target structure</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.AspectMeasurement.dimension">
            <summary>Dimension position in the target structure</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.AspectMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.AspectMeasurement">
            <summary>A simple structure allowing information of the interface array positions to be collected</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.StoreMeasurement.position">
            <summary>Position in the store</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.StoreMeasurement.store_id">
            <summary>The store id in the system</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.StoreMeasurement.system_id">
            <summary>System id</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.StoreMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.StoreMeasurement">
            <summary>A simple structure allowing information of the interface array positions to be collected.</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.StreamMeasurement.stream_id">
            <summary>Data store stream id</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.StreamMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.StreamMeasurement">
            <summary>A simple structure collecting various measurement information</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.DynamicMeasurement.is_array">
            <summary>Is measurement an array?</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.DynamicMeasurement.type">
            <summary>Basic type</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.DynamicMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.DynamicMeasurement">
            <summary>A simple structure collecting various measurement information</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.PointerMeasurement.category">
            <summary>Data store category</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.PointerMeasurement.measurement_id">
            <summary>Identification</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.PointerMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.PointerMeasurement">
            <summary>A simple structure collecting various measurement information</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.disp_ang_sweep">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.disp_ang_start">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.disp_max">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.disp_min">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.comment">
            <summary>comment (further measurement information)</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.unit">
            <summary>unit</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.size">
            <summary>size</summary>
        </member>
        <member name="F:OxTS.NavLib.FileBased.InfoMeasurement.tag">
            <summary>Data store measurement name</summary>
        </member>
        <member name="M:OxTS.NavLib.FileBased.InfoMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.FileBased.InfoMeasurement">
            <summary>A simple structure collecting various measurement information</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.report_streams(System.String@,System.Boolean)">
            <summary>Debug function to return string representation of streams in both high and low level code</summary>
            <param name="out">String showing debug information on streams</param>
            <param name="include_defunct">Include streams that are no longer active</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_direct_values(OxTS.NavLib.Realtime.Aspect,System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryValue}@)">
            <summary>Query the data store direct values defined by an aspect.</summary>
            <param name="aspect">Aspect to Query</param>
            <param name="qvs">list of values from Aspect</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@,System.UInt32,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the direct mode filtered on a particular stream id</summary>
            <param name="sm">List of measurements that have been added to direct decode</param>
            <param name="stream_id">Stream to get measurement for</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@,System.UInt32)">
            <summary>Query the data store measurement configuration of the direct mode filtered on a particular stream id</summary>
            <param name="sm">List of measurements that have been added to direct decode</param>
            <param name="stream_id">Stream to get measurement for</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@,System.UInt32,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the retain mode filtered on a particular stream id.</summary>
            <param name="sm">List of measurements that have been added to retain</param>
            <param name="stream_id">Stream Id to query</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@,System.UInt32)">
            <summary>Query the data store measurement configuration of the retain mode filtered on a particular stream id.</summary>
            <param name="sm">List of measurements that have been added to retain from <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the direct mode.</summary>
            <param name="sm">List of measurements that have been added to direct decode</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_direct_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@)">
            <summary>Query the data store measurement configuration of the direct mode.</summary>
            <param name="sm">List of measurements that have been added to direct decode</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the data store measurement configuration of the retain mode.</summary>
            <param name="sm">List of measurements that have been added to retain</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_retain_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StoreMeasurement}@)">
            <summary>Query the data store measurement configuration of the retain mode.</summary>
            <param name="sm">List of measurements that have been added to retain</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_stream_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StreamMeasurement}@,System.UInt32,OxTS.NavLib.Enum.MEASUREMENT_TYPE)">
            <summary>Query the measurements avaliable for a given stream.</summary>
            <param name="sm">List of measurements available from stream with <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <param name="filter">Filter based on measurement type</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_stream_measurements(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.StreamMeasurement}@,System.UInt32)">
            <summary>Query the measurements avaliable for a given stream.</summary>
            <param name="sm">List of measurements available from stream with <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_loggers(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryLogger}@)">
            <summary>Query the data store logger configuration</summary>
            <param name="qls">List of QueryLogger structures for all loggers in the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_streams(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryStream}@,System.Boolean)">
            <summary>Query the data store stream configuration.</summary>
            <param name="qss">List of QueryStream structures for all streams added to the datastore</param>
            <param name="include_defunct">Include defunct groups</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_streams(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryStream}@)">
            <summary>Query the data store stream configuration.</summary>
            <param name="qss">List of QueryStream structures for all streams added to the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_groups(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryGroup}@,System.Boolean)">
            <summary>Query the data store group configuration.</summary>
            <param name="qgs">List of QueryGroup structures for all groups within the datastore</param>
            <param name="include_defunct">Include defunct groups</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_groups(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryGroup}@)">
            <summary>Query the data store group configuration.</summary>
            <param name="qgs">List of QueryGroup structures for all groups within the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_resources(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryResource}@)">
            <summary>Query the data store resource configuration</summary>
            <param name="qrs">List of QueryResource structures of all resources added to the datastore</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_interfaces(System.Collections.Generic.List`1{OxTS.NavLib.Realtime.QueryInterface}@)">
            <summary>Query the data store interface configuration</summary>
            <param name="qis">List of QueryInterce structures for each interface in data store</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_logger(OxTS.NavLib.Realtime.QueryLogger@,System.UInt32)">
            <summary>Obtain some information about a logger.</summary>
            <param name="ql">QueryLogger structure containing details of <paramref name="logger_id" /></param>
            <param name="logger_id">Logger Id to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_stream(OxTS.NavLib.Realtime.QueryStream@,System.UInt32)">
            <summary>Obtain some information about a stream.</summary>
            <param name="qs">QueryStream structure containing details of <paramref name="stream_id" /></param>
            <param name="stream_id">Stream Id of stream to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_group(OxTS.NavLib.Realtime.QueryGroup@,System.UInt32)">
            <summary>Obtain some information about a group.</summary>
            <param name="qg">QueryGroup structure containing details of <paramref name="group_id" /></param>
            <param name="group_id">Group Id of group to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_resource(OxTS.NavLib.Realtime.QueryResource@,System.UInt32)">
            <summary>Obtain some information about a resource.</summary>
            <param name="qr">QueryResource structure containing details of <paramref name="resource_id" /></param>
            <param name="resource_id">Resource Id of resource to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_interface(OxTS.NavLib.Realtime.QueryInterface@,System.UInt32)">
            <summary>Obtain some information about an interface</summary>
            <param name="qi">Returned QueryInterface object containing interface information</param>
            <param name="interface_id">Interface Id to query</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.query_store(OxTS.NavLib.Realtime.QueryStore@)">
            <summary>Obtain some information about the store</summary>
            <param name="qs">QueryStore structure containing current store details</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_group_streams(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@,System.Boolean)">
            <summary>Get the streams of a group</summary>
            <param name="group_id">Group Id to query</param>
            <param name="stream_ids">Returned stream Ids</param>
            <param name="include_defunct">Include defunct groups</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_group_streams(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@)">
            <summary>Get the streams of a group</summary>
            <param name="group_id">Group Id to query</param>
            <param name="stream_ids">Returned stream Ids</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_resource_streams(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@,System.Boolean)">
            <summary>Get the streams of a resource.</summary>
            <param name="resource_id">Resource Id to query</param>
            <param name="stream_ids">Returned stream Ids</param>
            <param name="include_defunct">Include defunct groups</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_resource_streams(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@)">
            <summary>Get the streams of a resource.</summary>
            <param name="resource_id">Resource Id to query</param>
            <param name="stream_ids">Returned stream Ids</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_resource_groups(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@,System.Boolean)">
            <summary>Get the groups of a resource.</summary>
            <param name="resource_id">Resource Id to query</param>
            <param name="group_ids">Returned group Ids</param>
            <param name="include_defunct">Include defunct groups</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_resource_groups(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@)">
            <summary>Get the groups of a resource.</summary>
            <param name="resource_id">Resource Id to query</param>
            <param name="group_ids">Returned group Ids</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_interface_streams(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@,System.Boolean)">
            <summary>Get the streams of an interface.</summary>
            <param name="interface_id">Interface Id to query</param>
            <param name="stream_ids">Returned stream Ids</param>
            <param name="include_defunct">Include defunct streams</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_interface_streams(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@)">
            <summary>Get the streams of an interface.</summary>
            <param name="interface_id">Interface Id to query</param>
            <param name="stream_ids">Returned stream Ids</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_interface_groups(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@,System.Boolean)">
            <summary>Get the groups of an interface</summary>
            <param name="interface_id">Interface Id to query</param>
            <param name="group_ids">Returned group Ids</param>
            <param name="include_defunct">Include defunct groups</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_interface_groups(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@)">
            <summary>Get the groups of an interface.</summary>
            <param name="interface_id">Interface Id to query</param>
            <param name="group_ids">Returned group Ids</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_interface_resources(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@,System.Boolean)">
            <summary>Get the resources of an interface.</summary>
            <param name="interface_id">Interface Id to query</param>
            <param name="resource_ids">Returned resource Ids</param>
            <param name="include_defunct">Include defunct resources</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_interface_resources(System.UInt32,System.Collections.Generic.SortedSet`1{System.UInt32}@)">
            <summary>Get the resources of an interface.</summary>
            <param name="interface_id">Interface Id to query</param>
            <param name="resource_ids">Returned resource Ids</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_destroy(System.UInt32)">
            <summary>
Destroy an output logger.
For XCOM output this will also write all the footers. 
</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_enable(System.UInt32,System.Boolean)">
            <summary>Allow the logger to write to file as part of the update cycle</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="enable">Turn logging on/off</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_current(System.UInt32,System.Int64@)">
            <summary>Get the latest live current time from all the streams considered by the logger</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="nano">Returned nano time</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_interval(System.UInt32,System.Int64,System.Int64)">
            <summary>Update the begin and end time of  logging stream</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="nano_begin">Begin time</param>
            <param name="nano_end">End time</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_interval(System.UInt32,System.Int64)">
            <summary>Update the begin and end time of logging stream</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="nano_begin">Begin time</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_interval(System.UInt32)">
            <summary>Update the begin and end time of logging stream</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_end(System.UInt32,System.Int64)">
            <summary>Update the end time of logging stream</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="nano_end">GPS Nanosecond end time</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_end(System.UInt32)">
            <summary>Update the end time of all logging streams.</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_begin(System.UInt32,System.Int64)">
            <summary>Update the begin time of all logging streams</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="nano_begin">GPS Nanosecond begin time</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_streams_begin(System.UInt32)">
            <summary>Update the begin time of all logging streams</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_interval(System.UInt32,System.UInt32,System.Int64,System.Int64)">
            <summary>Update the begin and end time of a logging stream</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id</param>
            <param name="nano_begin">Nanosecond value for beginning</param>
            <param name="nano_end">Nanosecond value for end</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_interval(System.UInt32,System.UInt32,System.Int64)">
            <summary>Update the begin and end time of a logging stream</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id</param>
            <param name="nano_begin">Nanosecond value for beginning</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_interval(System.UInt32,System.UInt32)">
            <summary>Update the begin and end time of a logging stream.</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_end(System.UInt32,System.UInt32,System.Int64)">
            <summary>Update the end time of a logging stream.</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id</param>
            <param name="nano_end">Nano end value</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_end(System.UInt32,System.UInt32)">
            <summary>Update the end time of a logging stream.</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_begin(System.UInt32,System.UInt32,System.Int64)">
            <summary>Update the begin time of a logging stream.</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id</param>
            <param name="nano_begin">Nano begin value</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_begin(System.UInt32,System.UInt32)">
            <summary>Update the begin time of a logging stream.</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_stream_add(System.UInt32,System.UInt32)">
            <summary>
Add a stream to an output logger.
For XCOM output this will also the headers for the stream.
</summary>
            <param name="logger_id">Resource Id of loggger</param>
            <param name="stream_id">Stream Id to add to logger</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.logger_create(System.UInt32@,System.String)">
            <summary>Create an output logger.</summary>
            <param name="logger_id">Resource Id of the loggger created</param>
            <param name="file">File name of file to create</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.trigger_get(OxTS.NavLib.Realtime.Aspect,OxTS.NavLib.Realtime.Trace@)">
            <summary>Populate the destination trace with variables from the streams as requested by the aspect.</summary>
            <param name="aspect">Aspect of measurements requested</param>
            <param name="trace">Trace containing the requested data</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.trigger_use_element(OxTS.NavLib.Realtime.Aspect@,System.UInt32,System.String)">
            <summary>Use elements in an aspect.</summary>
            <param name="aspect">Aspect to add measurement to</param>
            <param name="stream_id">Stream Id</param>
            <param name="tag">name of measurement</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.trigger_add_element(System.UInt32,System.String)">
            <summary>
Add elements of a stream to a store.
For trigger mode all elements are added to the same store.
</summary>
            <param name="stream_id">Stream Id</param>
            <param name="tag">name of measurement</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.trigger_clear">
            <summary>Clear the internal element configuration.</summary>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.retain_get(OxTS.NavLib.Realtime.Aspect,OxTS.NavLib.Realtime.Trace@)">
            <summary>Populate the destination trace with variables from the streams as requested by the aspect.</summary>
            <param name="aspect">Aspect of measurements requested</param>
            <param name="trace">Trace containing the requested measurement data</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.retain_use_element(OxTS.NavLib.Realtime.Aspect@,System.UInt32,System.String)">
            <summary>Use elements in an aspect.</summary>
            <param name="aspect">Aspect to add measurement to</param>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to use for retain decode</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.retain_add_element(System.UInt32,System.String)">
            <summary>
Add elements of a stream to a store.
For retain mode all elements are added to the same store.
</summary>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to add for retain decode</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.retain_clear">
            <summary>Clear the internal element configuration.</summary>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.direct_get(OxTS.NavLib.Realtime.Aspect,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Variable`1{System.UInt16}}@)">
            <summary>Populate the destination vector with uint16 variables from the streams as requested by the aspect.</summary>
            <param name="aspect">Aspect containing the requested measurements</param>
            <param name="destination_variable">Measurement values output as Variable&lt;unsigned short&gt;</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.direct_get(OxTS.NavLib.Realtime.Aspect,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Variable`1{System.Double}}@)">
            <summary>Populate the destination vector with double variables from the streams as requested by the aspect.</summary>
            <param name="aspect">Aspect containing the requested measurements</param>
            <param name="destination_variable">Measurement values output as Variable&lt;double&gt;</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.direct_get(OxTS.NavLib.Realtime.Aspect,System.Collections.Generic.List`1{OxTS.NavLib.Lib.Dynamic}@)">
            <summary>Populate the destination array with dynamics from the streams as requested by the aspect.</summary>
            <param name="aspect">Aspect containing the requested measurements</param>
            <param name="destination_dynamic">Measurement values output as Dynamic</param>
            <returns>RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.direct_use_element(OxTS.NavLib.Realtime.Aspect@,System.UInt32,System.String)">
            <summary>Use elements in an aspect.</summary>
            <param name="aspect">Aspect to add measurement to</param>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to use for direct decode</param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.direct_add_element(System.UInt32,System.String)">
            <summary>
Add elements of a stream to a store.
For direct mode all elements are added to the same store.
</summary>
            <param name="stream_id">Stream Id</param>
            <param name="tag">Measurement name to add for direct decode</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.direct_clear">
            <summary>Clear the internal element configuration. </summary>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL. </returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_header(System.UInt32,System.String,OxTS.NavLib.Com.Meta)">
            <summary>Obtain a copy of a specific auxiliary header.</summary>
            <param name="stream_id">Stream</param>
            <param name="tag">Name of the header requested</param>
            <param name="meta">
                <paramref name="tag" /> header from  <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_headers(System.UInt32,System.Collections.Generic.List`1{OxTS.NavLib.Com.Meta}@)">
            <summary>Obtain a copy of the auxiliary headers.</summary>
            <param name="stream_id">Stream</param>
            <param name="metas">Auxillary headers from <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_stream_groupies(System.UInt32,System.Collections.Generic.List`1{System.UInt32}@)">
            <summary>Get all streams that are members of the same group that the given stream is a member of.</summary>
            <remarks>
The returned streams will contain the given stream, unless the given stream is unknown to the store
resulting in an empty result. If the size of the returned streams is one then we can conclude the
given stream is a singleton.
</remarks>
            <param name="stream_id">Stream in group</param>
            <param name="stream_ids">List of streams that are in the same group as <paramref name="stream_id" /></param>
            <returns>RETURN_TYPE_READ, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.contemporary_aspect(OxTS.NavLib.Realtime.Aspect)">
            <summary>Updated aspect based on contemporary streams.</summary>
            <param name="aspect">Aspect to update</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.contemporary_aspect(OxTS.NavLib.Realtime.Aspect@,OxTS.NavLib.Realtime.Aspect)">
            <summary>Update aspect based on contemporary streams</summary>
            <remarks>If update is not required then contemporary is not touched and RETURN_TYPE_NOTHING is returned</remarks>
            <param name="contemporary">Aspect to update</param>
            <param name="aspect">New aspect</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING, RETURN_TYPE_PANIC.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.stop_resource(System.UInt32)">
            <summary>Stop the underlying interface of a given resource.</summary>
            <remarks>
This will affect all resources associated with the underlying interface.
</remarks>
            <param name="resource_id">Resource Id of interface to stop</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.stop_interface(System.UInt32)">
            <summary>Stop an interface</summary>
            <param name="interface_id">Interface Id to stop</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.restart_resource(System.UInt32)">
            <summary>Restart the underlying interface of a given resource</summary>
            <remarks>
This will affect all resources associated with the underlying interface.
</remarks>
            <param name="resource_id">Resource Id of interface to restart</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.restart_interface(System.UInt32)">
            <summary>Restart an interface</summary>
            <param name="interface_id">Interface Id to restart</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.set_resource_loop(System.UInt32,System.Boolean)">
            <summary>Set the underlying interface loop flag of a given resource</summary>
            <remarks>
Only useful for replay resources.
This will affect all resources associated with the underlying interface.
</remarks>
            <param name="resource_id">Resource Id to set to loop</param>
            <param name="loop">Set looping setting</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.set_interface_loop(System.UInt32,System.Boolean)">
            <summary>Set Loop setting for replay stream, If true stream will restart after end</summary>
            <remarks>Only useful for replay interfaces.</remarks>
            <param name="interface_id">Interface Id to set loop setting for</param>
            <param name="loop">Set looping setting</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.set_resouce_reincarnation_wait(System.UInt32,System.Int64)">
            <summary>Set resource streams reincarnation wait time.</summary>
            <param name="resource_id">Resource Id to set wait time for</param>
            <param name="nano">Wait time in nanoseconds</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.set_resource_zombie(System.UInt32)">
            <summary>Set resource streams to zombie.</summary>
            <param name="resource_id">resource Id to zombie</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.set_resource_throttle(System.UInt32,System.Double)">
            <summary>Set resource speed for replay stream</summary>
            <remarks> Only useful for file based resources.</remarks>
            <param name="resource_id">resource Id of replay stream</param>
            <param name="throttle">Replay speed multiplier, 0.0=Paused, 1.0=normal</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.reset_resource_throttle(System.UInt32)">
            <summary>Reset resource speed to normal(1.0) for replay stream</summary>
            <remarks> Only useful for file based resources.</remarks>
            <param name="resource_id">Resource Id of replay stream</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.resource_send(System.UInt32,System.Collections.Generic.List`1{System.Byte})">
            <summary>Send data to a resource.</summary>
            <param name="resource_id">Resource Id to send data to</param>
            <param name="data">data to send to resource</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_NOTHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.update">
            <summary>Data store update.</summary>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NORMAL, RETURN_TYPE_SOMETHING.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_oxts_server(System.UInt32@,System.UInt16,System.UInt16,System.Collections.Generic.List`1{System.String})">
            <summary>Start an OxTS server pipe going, listening to only those address specified (empty means no filter).</summary>
            <param name="interface_id">Interface Id assigned to ethernet interface</param>
            <param name="recv_port">Receive port</param>
            <param name="send_port">Send port</param>
            <param name="IP">White list of IP addresses to filter</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_oxts_server(System.UInt16,System.UInt16)">
            <summary>Start an OxTS server pipe going</summary>
            <param name="recv_port">Receive port</param>
            <param name="send_port">Send port</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_ethernet(System.UInt32@,System.UInt16,System.UInt16,System.Collections.Generic.List`1{System.String})">
            <summary>Start an ethernet interface listening to only those address specified (empty means no filter)</summary>
            <param name="interface_id">Interface Id assigned to ethernet interface</param>
            <param name="recv_port">Receive port</param>
            <param name="send_port">Send port</param>
            <param name="IP">White list of IP addresses to filter</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_ethernet(System.UInt16,System.UInt16)">
            <summary>Start an ethernet interface</summary>
            <param name="recv_port">Receive port</param>
            <param name="send_port">Send port</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_serial(System.String,OxTS.NavLib.Lib.DeviceParams.Serial,System.UInt32@)">
            <summary>
Start serial interface with options
</summary>
            <param name="name">Serial port name</param>
            <param name="options">serial port options</param>
            <param name="resource_id">Interface Id assigned to the COM stream</param>
            <remarks> Start a serial, detect the resource, return the resource id.</remarks>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL, RETURN_TYPE_PANIC.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_serial(System.UInt32@,System.String)">
            <summary>Start serial interface with default options</summary>
            <param name="interface_id">Interface Id assigned to the COM stream</param>
            <param name="name">Serial port name</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_file(System.String,System.Double,System.UInt32@)">
            <summary>Data store file replay.</summary>
            <remarks> Start a file, detect the resource, set throttle, return the resource id.</remarks>
            <param name="name">File name</param>
            <param name="throttle">Replay speed multiplier, 0= Paused, 1=Normal Speed</param>
            <param name="resource_id">Resource Id assigned to the replay stream</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL, RETURN_TYPE_PANIC.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_file(System.UInt32@,System.String)">
            <summary>Data store file replay.</summary>
            <param name="interface_id">Interface Id assigned to the replay stream</param>
            <param name="name">File name</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.start_virtual(System.UInt32@)">
            <summary>Data store virtual streams.</summary>
            <param name="resource_id">Resource Id of the virtual streams</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL, RETURN_TYPE_PANIC.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_outgoing_message(OxTS.NavLib.Realtime.MessageOutgoing@,System.Boolean)">
            <summary>Get data store outgoing message.</summary>
            <param name="message">Reference used to return the outgoing message</param>
            <param name="flush">Flush message queue</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.get_outgoing_message(OxTS.NavLib.Realtime.MessageOutgoing@)">
            <summary>Get data store outgoing message.</summary>
            <param name="message">Reference used to return the outgoing message</param>
            <returns>RETURN_TYPE_WRITE, RETURN_TYPE_NOTHING, RETURN_TYPE_NORMAL.</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.Finalize">
            <summary>Finalizer.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.Dispose">
            <summary>Destructor.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DataStore.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.DataStore">
            <summary>Access class for online datastore. </summary>
        </member>
        <member name="F:OxTS.NavLib.Com.Meta.map">
            <summary>Parsed meta data</summary>
        </member>
        <member name="F:OxTS.NavLib.Com.Meta.title">
            <summary>Raw data component</summary>
        </member>
        <member name="F:OxTS.NavLib.Com.Meta.raw">
            <summary>Raw data component</summary>
        </member>
        <member name="M:OxTS.NavLib.Com.Meta.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Com.Meta">
            <summary>Communication related classes</summary>
            <summary>Ogg stream meta data</summary>
        </member>
        <member name="M:OxTS.NavLib.Lib.DeviceParams.Serial.#ctor(System.UInt16,System.UInt32,OxTS.NavLib.Enum.SERIAL_DATA_BITS,OxTS.NavLib.Enum.SERIAL_PARITY,OxTS.NavLib.Enum.SERIAL_STOP_BITS)">
            <summary>Constructor</summary>
            <param name="_port">Serial port</param>
            <param name="_baud">Baud</param>
            <param name="_data_bits">Data bits</param>
            <param name="_parity">Parity</param>
            <param name="_stop_bits">Stop Bits</param>
        </member>
        <member name="M:OxTS.NavLib.Lib.DeviceParams.Serial.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.DeviceParams.Serial.stop_bits">
            <summary>COM stop bits</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.DeviceParams.Serial.parity">
            <summary>COM parity</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.DeviceParams.Serial.data_bits">
            <summary>COM data bits</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.DeviceParams.Serial.baud">
            <summary>COM baud</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.DeviceParams.Serial.port">
            <summary>COM port</summary>
        </member>
        <member name="T:OxTS.NavLib.Lib.DeviceParams.Serial">
            <summary>Serial interface</summary>
        </member>
        <member name="T:OxTS.NavLib.Lib.DeviceParams">
            <summary>Simple Interface/Device parameters.</summary>
            <remarks>Meant to be fairly dumb, can be used by both interface and device to shuffle data arround.</remarks>
        </member>
        <member name="F:OxTS.NavLib.Realtime.MessageOutgoing.done">
            <summary>Percentage done</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.MessageOutgoing.operation">
            <summary>Message Type</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.MessageOutgoing.resource_id">
            <summary>Resource Id</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.MessageOutgoing.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.MessageOutgoing">
            <summary>class to aid messaging from NAVlib to outside API</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.post_fill">
            <summary>Post fill operations, such as sorting. </summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.pre_fill">
            <summary>Pre fill operations, such as clear data but retain historical information for the wipe option. </summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.set_count(System.UInt32,System.Int64)">
            <summary>
Set the update count number relating to a given store. 
If the store id is not known, then create an entry for it.
</summary>
            <param name="store_id">Store Id to set</param>
            <param name="count">Update count</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.get_count(System.UInt32)">
            <summary>
Get the update count number relating to a given store. 
If the store id is not known, then create an entry for it.
</summary>
            <param name="store_id">Store id to look up</param>
            <returns>update count</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.push(System.UInt32,System.Int64,System.Int64,OxTS.NavLib.Lib.Variable`1{System.Double})">
            <summary>Add a data point to a given strip of the trace</summary>
            <param name="strip_index">Strip to add to</param>
            <param name="nano">Stream time of data point</param>
            <param name="local">Local time of data point</param>
            <param name="variable">Measurement data point</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.rebound">
            <summary>Rebound</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.clear(System.UInt32,System.UInt32)">
            <summary>Clear a strip if its store id is different to the one given here add recompute bounds</summary>
            <param name="strip_index">Strip index to clear</param>
            <param name="store_id">Store id of stip index</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.expand(System.UInt32)">
            <summary>Expand internal structures given new sizes</summary>
            <param name="strip_size">New strip size</param>
            <remarks>This never reduces the size of anything</remarks>
            <returns>True</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.clear">
            <summary>Clear everything.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.size">
            <summary>Get strip count</summary>
            <returns>Number of strips</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.empty">
            <summary>True when no strips</summary>
            <remarks>This is not referring to the number of elements of a given strip.</remarks>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.get_status_green">
            <summary>Is status green?</summary>
            <returns>True if status green, otherwise false</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.get_strips">
            <summary>Get the underlying strip data</summary>
            <returns>List of strips</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.set_range(System.Int64)">
            <summary>Sets range from largest value minus <paramref name="nano_diff" /></summary>
            <param name="nano_diff">Nanosecond difference of range minimum and maximum</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.set_wipe(System.Boolean)">
            <summary>Set wipe</summary>
            <param name="option_wipe">If true only return new data</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.set_range(System.Int64,System.Int64)">
            <summary>Set range</summary>
            <param name="nano_min">Minimum GPS nanosecond in range</param>
            <param name="nano_max">Maximum GPS nanosecond in range</param>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Trace.var_max">
            <summary>Variable in trace with the largest GPS nanosecond</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Trace.var_min">
            <summary>Variable in trace with the smallest GPS nanosecond</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Trace.nano_big">
            <summary>Largest GPS nanosecond</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Trace.nano_now">
            <summary>Current GPS nanosecond in trace</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.Dispose">
            <summary>Destructor</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.#ctor(System.Boolean,System.UInt32)">
            <summary>Constructor</summary>
            <param name="option_wipe">Only return data collected since the previous retrieval</param>
            <param name="strip_capacity">Set capacity of strip</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.#ctor(System.Boolean)">
            <summary>Constructor</summary>
            <param name="option_wipe">Only return data collected since the previous retrieval</param>
            <remarks>Capacity of strips auto set to 3000 elements</remarks>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Trace.#ctor">
            <summary>Default constructor</summary>
            <remarks>Capacity of strips auto set to 3000 elements</remarks>
        </member>
        <member name="T:OxTS.NavLib.Realtime.Trace">
            <summary>List of strips of realtime data over a time period</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.Strip.m_impl">
            <summary>Sort the data.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.wipe">
            <summary>Clears the internal array but still retains historical infomration.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.push(System.Int64,System.Int64,OxTS.NavLib.Lib.Variable`1{System.Double})">
            <summary>Add a data point to a given strip of the strip</summary>
            <param name="nano">Stream time of data point</param>
            <param name="local">Local time of data point</param>
            <param name="variable">Measurement data point</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.clear">
            <summary>Puts the strip back to a state where no data has come in.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.get_reverse_range">
            <summary>Get internal data for the user set range reversed</summary>
            <returns> List of data in range reversed</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.get_range">
            <summary>Get internal data for the user set range</summary>
            <returns> List of data in range</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.get_variables">
            <summary>Get all internal data</summary>
            <returns> List of all data in strip</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.full">
            <summary>Is full</summary>
            <returns>True if current size == capacity, otherwise false</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.empty">
            <summary>Is empty</summary>
            <returns>True if current size == 0, otherwise false</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.size">
            <summary>Size</summary>
            <returns>current number of elements in strip</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.get_status_green">
            <summary>Is status green</summary>
            <returns>True if status green, otherwise false</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.get_index">
            <summary>Index</summary>
            <returns>Index in trace</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.get_capacity">
            <summary>Capacity</summary>
            <returns>Strip capacity</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.info">
            <summary> Debug like information</summary>
            <returns>Debug info</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.set_range(System.Int64,System.Int64)">
            <summary> Set user range and reverse range from nano values</summary>
            <param name="nano_min">Minimum GPS nanosecond value</param>
            <param name="nano_max">Maximum GPS nanosecond value</param>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Strip.var_now">
            <summary>Latest variable added to strip</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Strip.var_max">
            <summary>Variable in trace with the largest GPS nanosecond</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Strip.var_min">
            <summary>Variable in trace with the smallest GPS nanosecond</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Strip.nano_big">
            <summary>largest GPS nanosecond in strip</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Strip.nano_now">
            <summary>Latest GPS nanosecond time of variable added to strip</summary>
        </member>
        <member name="P:OxTS.NavLib.Realtime.Strip.store_id">
            <summary>Store Id of strip</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.Dispose">
            <summary>Destructor</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.#ctor(System.UInt32,System.UInt32)">
            <summary>Constructor</summary>
            <param name="index">Index</param>
            <param name="strip_capacity">Set capacity of strip</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.#ctor(System.UInt32)">
            <summary>Constructor</summary>
            <param name="index">Index</param>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Strip.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.Strip">
            <summary>List of variables of a single measurement of realtime data over a time period</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.destination_at(System.UInt32)">
            <summary>Get specific destination measurement from Aspect</summary>
            <param name="destination_index">Index of destination measurement to retrieve</param>
            <returns>Copy of destination measurement if index is in range, nullptr otherwise</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.destinations">
            <summary>Get List of destination measurements from Aspect</summary>
            <returns>List of destination measurements</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.measurement_at(System.UInt32)">
            <summary>Get Measurement at specific index in Aspect</summary>
            <param name="measurement_index">Index of aspect measurement to retrieve</param>
            <returns>Copy of aspect measurement if index is in range, nullptr otherwise</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.measurements">
            <summary>Get List of measurements from Aspect</summary>
            <returns>List of measurements in aspect</returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.clear">
            <summary>Clears the aspect stores, measurements and destinations.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.Dispose">
            <summary>Destructor</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.Aspect.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.Aspect">
            <summary>Aspect</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.DestinationMeasurement.index">
            <summary>Index into the original mesaurement</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.DestinationMeasurement.measurement">
            <summary>Original measurement index</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DestinationMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.DestinationMeasurement">
            <summary>A simple structure allowing information of the interface array positions to be collected.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.AspectMeasurement.destination">
            <summary>Destination position in the target structure</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.AspectMeasurement.dimension">
            <summary>Dimension position in the target structure</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.AspectMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.AspectMeasurement">
            <summary>A simple structure allowing information of the interface array positions to be collected</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.StoreMeasurement.position">
            <summary>Position in the store</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.StoreMeasurement.store_id">
            <summary>The store id in the system</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.StoreMeasurement.system_id">
            <summary>System Id</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.StoreMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.StoreMeasurement">
            <summary>A simple structure allowing information of the interface array positions to be collected</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.StreamMeasurement.op_Assign(OxTS.NavLib.Realtime.StreamMeasurement)">
            <summary>Assignment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.StreamMeasurement.#ctor(OxTS.NavLib.Realtime.StreamMeasurement)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.StreamMeasurement.stream_id">
            <summary>Data store stream id</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.StreamMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.StreamMeasurement">
            <summary>A simple structure collecting various measurement information.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DynamicMeasurement.op_Assign(OxTS.NavLib.Realtime.DynamicMeasurement)">
            <summary>Assigment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DynamicMeasurement.#ctor(OxTS.NavLib.Realtime.DynamicMeasurement)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.DynamicMeasurement.array">
            <summary>Is measurement an array?</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.DynamicMeasurement.type">
            <summary>Basic type</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.DynamicMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.DynamicMeasurement">
            <summary>A simple structure collecting various measurement information.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.PointerMeasurement.op_Assign(OxTS.NavLib.Realtime.PointerMeasurement)">
            <summary>Assignment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.PointerMeasurement.#ctor(OxTS.NavLib.Realtime.PointerMeasurement)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.PointerMeasurement.category">
            <summary>Data store category</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.PointerMeasurement.measurement_id">
            <summary>Identification</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.PointerMeasurement.#ctor">
            <summary>Default constrctor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.PointerMeasurement">
            <summary>A simple structure collecting various measurement information</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.InfoMeasurement.op_Assign(OxTS.NavLib.Realtime.InfoMeasurement)">
            <summary>Assignment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.InfoMeasurement.#ctor(OxTS.NavLib.Realtime.InfoMeasurement)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.disp_ang_sweep">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.disp_ang_start">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.disp_max">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.disp_min">
            <summary>Default display parameters</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.comment">
            <summary>Comment</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.unit">
            <summary>Unit</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.size">
            <summary>Size</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.InfoMeasurement.tag">
            <summary>Data store measurement name</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.InfoMeasurement.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.InfoMeasurement">
            <summary>A simple structure collecting various measurement information</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryLogger.op_Assign(OxTS.NavLib.Realtime.QueryLogger)">
            <summary>Assignment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryLogger.#ctor(OxTS.NavLib.Realtime.QueryLogger)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerWrote">
            <summary>Logger number of bytes written</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerWrite">
            <summary>Logger number of bytes to write</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerFinished">
            <summary>Logger is finised</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerLocked">
            <summary>Logger is locked</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerReady">
            <summary>Logger is ready</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerEnable">
            <summary>Logger is enabled.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerStreamCount">
            <summary>Logger count of number of added streams</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerName">
            <summary>Logger name</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerTransport">
            <summary>Logger transport type</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryLogger.LoggerId">
            <summary>Logger id as assigned to by the data store</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryLogger.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.QueryLogger">
            <summary>Simple structure to aid the querying of a logger</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryValue.#ctor(OxTS.NavLib.Realtime.QueryValue)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryValue.Value">
            <summary>Measurement value.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryValue.Destination">
            <summary>Destination.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryValue.Tag">
            <summary>Measuremnt name.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryValue.StreamId">
            <summary>Stream id.</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryValue.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.QueryValue">
            <summary>Simple structure to aid the querying of values defined by an aspect</summary>
            <remarks>Note: This is not very fast so for regular numerical work don't use this, use the get functions</remarks>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryStream.op_Assign(OxTS.NavLib.Realtime.QueryStream)">
            <summary>Assigment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryStream.#ctor(OxTS.NavLib.Realtime.QueryStream)">
            <summary>Copy Constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamProductName">
            <summary>Product name.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamContemporary">
            <summary>Stream ID of the stream's latest successor.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamSuccessor">
            <summary>Stream ID of the stream's successor.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamPredecessor">
            <summary>Stream ID of the stream's predecessor.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamOriginator">
            <summary>stream ID of the stream's earliest predecessor.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamIncarnation">
            <summary>The stream incarnation.  </summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamDefunct">
            <summary>Is stream defunct?   </summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamZombied">
            <summary>Is stream zombied?</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamStorable">
            <summary>Are all streams are storable?</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamConfigured">
            <summary>Are all streams are configured?</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamCaptured">
            <summary>Are all streams are captured?</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamCodec">
            <summary>Stream codec.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamSerialId">
            <summary>Serial id as given in the resource</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStream.StreamId">
            <summary>Stream id as assigned to by the data store</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryStream.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.QueryStream">
            <summary>Simple structure to aid the querying of a stream</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryGroup.op_Assign(OxTS.NavLib.Realtime.QueryGroup)">
            <summary>Assigment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryGroup.#ctor(OxTS.NavLib.Realtime.QueryGroup)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryGroup.GroupTag">
            <summary>The group tag as given in the resource.</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryGroup.GroupId">
            <summary>The group id as assigned to by the data store.</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.QueryGroup">
            <summary>Simple structure to aid the querying of a group</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryResource.op_Assign(OxTS.NavLib.Realtime.QueryResource)">
            <summary>Assigment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryResource.#ctor(OxTS.NavLib.Realtime.QueryResource)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceThrottle">
            <summary>Resource throttle</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceLag">
            <summary>Resource lag in nanoseconds</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceAge">
            <summary>Resource age in nanoseconds</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceModified">
            <summary>Time of resource last modification</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceCreation">
            <summary>Time of resource creation</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceIp">
            <summary>Resource IP address</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceAddress">
            <summary>Resource address</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceExtension">
            <summary>Resource extension</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceName">
            <summary>Resource name</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceTransport">
            <summary>Transport type</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryResource.ResourceId">
            <summary>Datastore assigned resource Id</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryResource.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.QueryResource">
            <summary>Simple structure to aid the querying of a resource</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryInterface.op_Assign(OxTS.NavLib.Realtime.QueryInterface)">
            <summary>Assignment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryInterface.#ctor(OxTS.NavLib.Realtime.QueryInterface)">
            <summary>Copy Constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryInterface.InterfacePortSend">
            <summary>Interface send port</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryInterface.InterfacePortReceive">
            <summary>nterface recieve port</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryInterface.InterfaceType">
            <summary>Interface Type</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryInterface.InterfaceId">
            <summary>Datastore assigned Interface Id</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryInterface.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.QueryInterface">
            <summary>Simple structure to aid the querying of an interface</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryStore.op_Assign(OxTS.NavLib.Realtime.QueryStore)">
            <summary>Assignment operator</summary>
            <param name="copy">Object to copy</param>
            <returns>Copy of <paramref name="copy" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryStore.#ctor(OxTS.NavLib.Realtime.QueryStore)">
            <summary>Copy constructor</summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStore.UpdateRate">
            <summary>Data store update rate</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStore.UpdateLoad">
            <summary>Data store update load</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStore.Loggers">
            <summary>The number of loggers</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStore.Streams">
            <summary>The number of streams</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStore.Groups">
            <summary>The number of groups</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStore.Resources">
            <summary>The number of resources</summary>
        </member>
        <member name="F:OxTS.NavLib.Realtime.QueryStore.Interfaces">
            <summary>The number of interfaces</summary>
        </member>
        <member name="M:OxTS.NavLib.Realtime.QueryStore.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:OxTS.NavLib.Realtime.QueryStore">
            <summary>
Simple structure to aid the querying general properties of the data store</summary>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.ToGPSDays">
            <summary>Get GPS day number</summary>
            <returns>GPS Day number</returns>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.ToGPSWeekSecond">
            <summary>Get GPSWeekSecond</summary>
            <remarks>Note: GPSWeekSecond only has second precision, this value is truncated not rounded</remarks>
            <returns>GPSWeekSecond representation of data</returns>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.GetUTCOffset">
            <summary>Gets the GPS to UTC offset of the current time value in seconds</summary>
            <returns>UTC Offset in seconds</returns>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.ToGPSNanoseconds">
            <summary>Get nanoseconds since GPs epoch</summary>
            <returns>Nanoseconds since GPS epoch of data</returns>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.ToSystemDateTime">
            <summary>Get System::DateTime</summary>
            <remarks>Note: System::DateTime only has millisecond precision, this value is truncated not rounded</remarks>
            <returns>DateTime representation of data</returns>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.FromGPSNanoseconds(System.Int64)">
            <summary>Get date/time from GPS nanoseconds</summary>
            <param name="gps_nanos">Nanoseconds since GPS epoch</param>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.FromGPSSeconds(System.Int64)">
            <summary>Set date/time from GPS seconds</summary>
            <param name="gps_secs">Seconds since GPS epoch</param>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.FromGPSWeekSeconds(OxTS.NavLib.Lib.GPSWeekSecond)">
            <summary>Set date/time from GPS weekseconds</summary>
            <param name="week_seconds">GPS week second data</param>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.Finalize">
            <summary>Finalizer</summary>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.Dispose">
            <summary>Destructor</summary>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.#ctor(OxTS.NavLib.Lib.UtcNano)">
            <summary>Copy constructor</summary>
            <param name="copy">UtcNano object to create copy</param>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.#ctor(System.ValueType!System.DateTime!System.Runtime.CompilerServices.IsBoxed)">
            <summary>Constructor</summary>
            <param name="date_time">UTC date time</param>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Constructor</summary>
            <param name="year">Year</param>
            <param name="month">Month number</param>
            <param name="day">Day of month</param>
            <param name="hour">Hour of day (24 hour format)</param>
            <param name="minute">Minutes</param>
            <param name="second">Seconds</param>
            <param name="milli">Milliseconds</param>
            <param name="micro">Microseconds</param>
            <param name="nano">Nanoseconds</param>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.ns">
            <summary>Nanoseconds</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.us">
            <summary>Microseconds</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.ms">
            <summary>Milliseconds</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.s">
            <summary>Seconds</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.m">
            <summary>Minutes</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.h">
            <summary>Hours (24 hour format)</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.D">
            <summary>Day</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.M">
            <summary>Month</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.UtcNano.Y">
            <summary>Year</summary>
        </member>
        <member name="M:OxTS.NavLib.Lib.UtcNano.GPSNanoToUTC(System.Int64)">
            <summary>Convert GPS Nanoseconds to UTC nanoseconds</summary>
            <param name="gps_nano">Nanoseconds since GPS epoch</param>
            <returns>UTC Nanoseconds representation of GPs Nanoseconds</returns>
        </member>
        <member name="T:OxTS.NavLib.Lib.UtcNano">
            <summary>Class to handle GPS/UTC conversion</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.GPSWeekSecond.SecondsOfWeek">
            <summary>GPS week second</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.GPSWeekSecond.WeekNumber">
            <summary>GPS week number</summary>
        </member>
        <member name="M:OxTS.NavLib.Lib.GPSWeekSecond.ToString">
            <summary>ToString</summary>
            <returns>String representation in "Week/Second" format</returns>
        </member>
        <member name="M:OxTS.NavLib.Lib.GPSWeekSecond.#ctor(System.Int64,System.Int64)">
            <summary>Constructor</summary>
            <param name="week_number">GPS week number</param>
            <param name="second_of_week">GPS week second</param>
        </member>
        <member name="T:OxTS.NavLib.Lib.GPSWeekSecond">
            <summary>Struct to store the GPS Week number and Weeksecond</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.Variable`1.flags">
            <summary>Flags indicating data validity</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.Variable`1.data">
            <summary>Measurement value</summary>
        </member>
        <member name="F:OxTS.NavLib.Lib.Variable`1.nano">
            <summary>Timestamp of measurement in nanoseconds</summary>
        </member>
        <member name="T:OxTS.NavLib.Lib.Variable`1">
            <summary>A time-stamped variable with status flags</summary>
            <typeparam name="T">Datatype  used to stire data values</typeparam>
        </member>
        <member name="M:OxTS.NavLib.Lib.Dynamic.ToString">
            <summary>System::String representation of measurement value</summary>
            <returns>String representation of data: custom conversions for time, firmware etc done within data store</returns>
        </member>
        <member name="P:OxTS.NavLib.Lib.Dynamic.flags">
            <summary>Flags indicating data validity</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.Dynamic.type">
            <summary>Basic type of data</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.Dynamic.nano">
            <summary>Timestamp of measurement in nanoseconds</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.Dynamic.value_as_double">
            <summary>Measurement value converted to double</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.Dynamic.value">
            <summary>Measurement value</summary>
        </member>
        <member name="T:OxTS.NavLib.Lib.Dynamic">
            <summary>Dynamic data store type.</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.perfect">
            <summary>The data is good and has a time stamp</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.good">
            <summary>The data is useable and is strictly of expected quality</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.ok">
            <summary>The data is useable with any quality</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.poor">
            <summary>The data is useable but is strictly not of expected quality</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.bad">
            <summary>The data is not useable in anyway </summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isStale">
            <summary>Value is out of date</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isApprox">
            <summary>Very approximate value, typically not in normal operation</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isUnder">
            <summary>Numerical underflow, can be -saturation to -infinity</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isOver">
            <summary>Numerical overflow, can be +saturation to +infinity</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isTimeless">
            <summary>The associated time stamp is invalid</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isPass">
            <summary>Value is valid but is in some kind of do not use state</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isInvalid">
            <summary>The transmitter states the value is invalid</summary>
        </member>
        <member name="P:OxTS.NavLib.Lib.StatusFlags.isRejected">
            <summary>The decoder has decided to reject the value</summary>
        </member>
        <member name="M:OxTS.NavLib.Lib.StatusFlags.#ctor">
            <summary>Default Constructor sets rejected flag only</summary>
        </member>
        <member name="T:OxTS.NavLib.Lib.StatusFlags">
            <summary>Status flag class</summary>
        </member>
        <member name="M:OxTS.NavLib.Util.EnumUtils.GetComment(System.Enum)">
            <summary>Get description</summary>
            <param name="en">Enum value</param>
            <returns>Description associated with Enum value <paramref name="en" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Util.EnumUtils.GetName(System.Enum)">
            <summary>Get Data Store name</summary>
            <param name="en">Enum value</param>
            <returns>Datastore name of <paramref name="en" /></returns>
        </member>
        <member name="M:OxTS.NavLib.Util.EnumUtils.GetVerbose(System.Enum)">
            <summary>Get full name</summary>
            <param name="en">Enum value</param>
            <returns>Verbose name of <paramref name="en" /></returns>
        </member>
        <member name="T:OxTS.NavLib.Util.EnumUtils.Comment">
            <summary>Description</summary>
        </member>
        <member name="T:OxTS.NavLib.Util.EnumUtils.Name">
            <summary>Data Store name</summary>
        </member>
        <member name="T:OxTS.NavLib.Util.EnumUtils.Verbose">
            <summary>Full name</summary>
        </member>
        <member name="T:OxTS.NavLib.Util.EnumUtils">
            <summary>Enum Utils class</summary>
            <remarks> Class containing attributes associated to the Enums</remarks>
        </member>
    </members>
</doc>